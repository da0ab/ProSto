import re
from collections import defaultdict
import sass
import os
from pathlib import Path
from csscompressor import compress

# =============================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# =============================================
config = {
    'main': {
        'input_files': ['src/components/ProSto.scss'],
        'include_paths': ['src/components'],
        'combined_output': 'build/css/ProSto.css',
        'compressed_output': 'build/css/ProSto.min.css'
    },
    'dubak': {
        'input_files': [
            'src/components/ProSto.scss',
            'src/components/ProSto-CMS.scss'
        ],
        'include_paths': ['src/components'],
        'combined_output': 'build/css/ProStoCMS.css',
        'compressed_output': 'build/css/ProStoCMS.min.css'
    }
}

# =============================================
# –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =============================================
def ensure_directory_exists(filepath):
    """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
    os.makedirs(os.path.dirname(filepath), exist_ok=True)

def compile_sass(input_files, include_paths):
    """–ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç SASS/SCSS –≤ CSS"""
    try:
        abs_include_paths = [str(Path(p).resolve()) for p in include_paths]
        return sass.compile(
            string='\n'.join(open(f, 'r', encoding='utf-8').read() for f in input_files),
            include_paths=abs_include_paths,
            output_style='expanded'
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏: {e}")
        return None

def protect_svg_data_urls(css_content):
    """
    –ó–∞—â–∏—â–∞–µ—Ç SVG –≤ data: URL –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–∏:
    - background:url('data:image/svg+xml;utf8,<svg...')
    - background:url("data:image/svg+xml;charset=UTF-8,<svg...")
    - src:url(data:image/svg+xml;base64,...)
    """
    protected = {}
    counter = 0

    def replace_fn(match):
        nonlocal counter
        key = f'___SVG_DATA_URL_{counter}___'
        protected[key] = match.group(0)
        counter += 1
        return key

    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö data: URL —Å SVG
    pattern = r'''
    url\(                                  # –Ω–∞—á–∞–ª–æ url(
    (['"]?)                                # –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
    data:image/svg\+xml                    # —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
    (;[^\s'"]+)?                           # –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (charset, utf8 –∏ —Ç.–¥.)
    ,                                      # —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    (?:[^)'"]|'[^']*'|"[^"]*")*           # —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ SVG (—Å —É—á–µ—Ç–æ–º –∫–∞–≤—ã—á–µ–∫)
    \1                                     # –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ –∫–∞–≤—ã—á–∫–∏ (–µ—Å–ª–∏ –±—ã–ª–∏)
    \)                                     # –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
    '''
    protected_css = re.sub(
        pattern,
        replace_fn,
        css_content,
        flags=re.VERBOSE | re.IGNORECASE
    )

    return protected_css, protected

def restore_svg_data_urls(css_content, protected):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ SVG data: URL –ø–æ—Å–ª–µ —Å–∂–∞—Ç–∏—è"""
    result = css_content
    for key, value in protected.items():
        result = result.replace(key, value)
    return result

def clean_empty_lines(css_content):
    """–£–¥–∞–ª—è–µ—Ç –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
    cleaned = re.sub(r'\n\s*\n', '\n', css_content)
    return cleaned.strip()

def group_media_queries(css_content):
    """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –º–µ–¥–∏–∞–∑–∞–ø—Ä–æ—Å—ã, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É CSS"""
    blocks = []
    current_block = []
    brace_level = 0

    for line in css_content.split('\n'):
        brace_level += line.count('{') - line.count('}')
        current_block.append(line)

        if brace_level == 0 and current_block:
            blocks.append('\n'.join(current_block))
            current_block = []

    media_dict = defaultdict(list)
    other_blocks = []

    for block in blocks:
        if block.strip().startswith('@media'):
            media_condition = block.split('{', 1)[0].strip()
            content = block.split('{', 1)[1].rsplit('}', 1)[0].strip()
            media_dict[media_condition].append(content)
        else:
            other_blocks.append(block.strip())

    result = other_blocks.copy()
    for condition, contents in media_dict.items():
        grouped_content = '  ' + '\n  '.join(contents)
        result.append(f"{condition} {{\n{grouped_content}\n}}")

    return '\n\n'.join(result)

def process_config(conf_name):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    conf = config[conf_name]
    print(f"\nüîß –û–±—Ä–∞–±–æ—Ç–∫–∞ {conf_name} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

    # 1. –ö–æ–º–ø–∏–ª—è—Ü–∏—è SASS
    print(f"‚öôÔ∏è –ö–æ–º–ø–∏–ª—è—Ü–∏—è {len(conf['input_files'])} —Ñ–∞–π–ª–æ–≤...")
    css = compile_sass(conf['input_files'], conf['include_paths'])
    if not css:
        return False

    # 2. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –º–µ–¥–∏–∞–∑–∞–ø—Ä–æ—Å–æ–≤
    print("üîÑ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –º–µ–¥–∏–∞–∑–∞–ø—Ä–æ—Å–æ–≤...")
    grouped_css = group_media_queries(css)

    # 3. –û—á–∏—Å—Ç–∫–∞ –æ—Ç –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
    print("üßπ –£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫...")
    cleaned_css = clean_empty_lines(grouped_css)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∏—Ç–∞–µ–º—É—é –≤–µ—Ä—Å–∏—é
    ensure_directory_exists(conf['combined_output'])
    with open(conf['combined_output'], 'w', encoding='utf-8') as f:
        f.write(cleaned_css)
    print(f"‚úÖ –ß–∏—Ç–∞–µ–º–∞—è –≤–µ—Ä—Å–∏—è: {conf['combined_output']}")

    # 4. –°–∂–∞—Ç–∏–µ —Å –∑–∞—â–∏—Ç–æ–π SVG data: URL
    print("üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∂–∞—Ç–æ–π –≤–µ—Ä—Å–∏–∏ —Å –∑–∞—â–∏—Ç–æ–π SVG...")

    # –ó–∞—â–∏—â–∞–µ–º SVG data: URL –ø–µ—Ä–µ–¥ —Å–∂–∞—Ç–∏–µ–º
    protected_css, protected_urls = protect_svg_data_urls(cleaned_css)

    # –°–∂–∏–º–∞–µ–º CSS
    compressed = compress(protected_css)

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SVG data: URL
    final_css = restore_svg_data_urls(compressed, protected_urls)

    ensure_directory_exists(conf['compressed_output'])
    with open(conf['compressed_output'], 'w', encoding='utf-8') as f:
        f.write(final_css)
    print(f"‚úÖ –°–∂–∞—Ç–∞—è –≤–µ—Ä—Å–∏—è —Å –∑–∞—â–∏—â–µ–Ω–Ω—ã–º–∏ SVG: {conf['compressed_output']}")

    return True

# =============================================
# –ó–ê–ü–£–°–ö –°–ö–†–ò–ü–¢–ê
# =============================================
def main():
    print("="*50)
    print("üé® SASS –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä v2.9 (—Å –∑–∞—â–∏—Ç–æ–π SVG data: URL)")
    print("="*50)

    try:
        import sass
        from csscompressor import compress
    except ImportError as e:
        print(f"‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {e}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install libsass csscompressor")
        return

    success = all(process_config(conf) for conf in config)
    print("\n‚ú® –ì–æ—Ç–æ–≤–æ!" if success else "\n‚ùå –ë—ã–ª–∏ –æ—à–∏–±–∫–∏!")

if __name__ == '__main__':
    main()
